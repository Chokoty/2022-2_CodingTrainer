#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// person 구조체
typedef struct
{
	char name[50];
	char phone[20];
	int pay_hour;
	int work_hour;
	int total_pay;
}PERSON;

// 임금 기준 내림차순 정렬함수
void swapPerson(PERSON *p1, PERSON *p2);

int main()
{
	int n;
	int len;
	FILE *input, *output;
	PERSON *persons;

    // 파일 입출력 부분
	input = fopen("input.txt", "r");
	// 에러처리
    if (input == NULL)
	{
		printf("fopen() fail\n");
		return 0;
	}

	output = fopen("output.txt", "w");
	if (!output)
	{
		printf("fopen() fail\n");
		return 0;
	}

    // 파일 읽어오기

    // 인원 수로 동적할당
	fscanf(input, "%d", &n);
    // 버퍼 비우기
	fgetc(input);
	persons = (PERSON*)malloc(sizeof(PERSON) * n);

	for (int i = 0; i < n; i++)
	{
        // 이름 읽기
		fgets(persons[i].name, 50, input);
		len = strlen(persons[i].name);
		persons[i].name[len - 1] = '\0';

        // 전화번호 읽기
		fgets(persons[i].phone, 20, input);
		len = strlen(persons[i].phone);
		persons[i].phone[len - 1] = '\0';

        // 나머지 숫자 입력은 fscanf로 
		fscanf(input, "%d %d ", &persons[i].work_hour, &persons[i].pay_hour);
		persons[i].total_pay = persons[i].work_hour * persons[i].pay_hour;
	}

    // 임금 기준으로 내림차순 정렬 - 버블정렬 -> 선택정렬로 바꾸기
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n; j++) {
			if (persons[j].total_pay < persons[j + 1].total_pay) {
				swapPerson(&persons[j], &persons[j + 1]);
			}
		}
	}

    // 파일에 쓰기
	fprintf(output, "Name\tPhone\t\t\t\tWorking Hour\tpay/hour\ttotal pay\n");

	for (int i = 0; i < n; i++)
	{
		fprintf(output, "%s\t%s\t\t%d\t\t\t\t%d\t\t%d\n", persons[i].name, persons[i].phone,
			persons[i].work_hour, persons[i].pay_hour, persons[i].total_pay);
	}

	printf("성공!\n");

    // 동적할당, 파일 해제하기
	free(persons);
	fclose(input);
	fclose(output);
	return 0;
}

void swapPerson(PERSON *p1, PERSON *p2) {
	PERSON temp;

	temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}