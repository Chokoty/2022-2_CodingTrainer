#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 자료구조 연결리스트 스택 구현하기 - 거니 Youtube

typedef struct sNode{
  char* data;
  struct sNode* next;
}Node;

typedef struct _listStack{
  Node* peek;
  int size;
}listStack;

void createStack(listStack **Stack){
  (*Stack) = (listStack*)malloc(sizeof(listStack));
  (*Stack)->peek = NULL;
  (*Stack)->size = 0;
}

Node* createNode(char* newChar){
  Node* newNode = (Node*)malloc(sizeof(Node));
  newNode->data = (char*)malloc(strlen(newChar)+1);
  
  strcpy(newNode->data, newChar);
  newNode->next = NULL;
  
  return newNode;
}

void deleteNode(Node* removeNode){
  free(removeNode->data);
  free(removeNode);
}


void Push(listStack* Stack, Node* newNode){

  // when stack is empty
  if(Stack->size == 0){
    Stack->peek = newNode;
  }
  // when stack is not empty
  else{
    newNode->next = Stack->peek; // a(peek) <- b
    Stack->peek = newNode; // a <- b(peek)
  }
  Stack->size++;
}

Node* Pop(listStack* Stack){
  
  Node* tempNode;

  // when stack is empty
  if(Stack->size == 0){
    printf("hey!!! stack is empty");
    tempNode = NULL;
  }
  // when stack is not empty
  else{
    tempNode = Stack->peek; //peek이 중요함
    Stack->peek = Stack->peek->next;
    Stack->size--;
  }

  return tempNode;
}

void deleteStack(listStack* Stack){

  int count = Stack->size;
  int i;
  Node* tempNode;

  for(i=0; i<count; i++){ // 다 보내버려
    tempNode = Pop(Stack); // 불려오면 그냥 나가는거야
    deleteNode(tempNode);
  }

  free(Stack);

}


int main(void){

   int i;
  listStack* Stack;

  createStack(&Stack);

  Push(Stack, createNode("a"));
  Push(Stack, createNode("b"));
  Push(Stack, createNode("c"));
  Push(Stack, createNode("d"));

  printf("abcd pushed!\n");

  printf("\n--Current Stack--[size:%d]\n\n",Stack->size);

  Node* horse = Stack->peek;
  for(i=0; i< Stack->size; i++){
    printf("%s\n", horse->data);
    horse = horse->next;
  }

  horse = Pop(Stack);
  horse = Pop(Stack);

  printf("\n--Current Stack--[size:%d]\n\n",Stack->size);

  horse = Stack->peek;
  for(i=0; i< Stack->size; i++){
    printf("%s\n", horse->data);
    horse = horse->next;
  }

  deleteStack(Stack);
  printf("\n Satck has been completely freed\n");

  return 0;
} 
